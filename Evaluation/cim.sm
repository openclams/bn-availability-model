ctmc

module D1 
	 D1_w: bool init true;
	 [D1_failure] D1_w -> 0.0002000000:(D1_w' = false);
	 [D1_repaired] !D1_w  -> 1.0000000000:(D1_w' = true);
endmodule

module D2 
	 D2_w: bool init true;
	 [D2_failure] D2_w -> 0.0000100000:(D2_w' = false);
	 [D2_repaired] !D2_w  -> 1.0000000000:(D2_w' = true);
endmodule

module R1 
	 R1_w: bool init true;
	 [R1_failure] R1_w -> 0.0000100000:(R1_w' = false);
	 [R1_repaired] !R1_w & D1_w -> 1.0000000000:(R1_w' = true);
	 [D1_failure] true -> 1:(R1_w' = false);
	 [D1_repaired] true -> 1:(R1_w' = true);
endmodule

module R2 
	 R2_w: bool init true;
	 [R2_failure] R2_w -> 0.0000100000:(R2_w' = false);
	 [R2_repaired] !R2_w & D1_w -> 1.0000000000:(R2_w' = true);
	 [D1_failure] true -> 1:(R2_w' = false);
	 [D1_repaired] true -> 1:(R2_w' = true);
endmodule

module R3 
	 R3_w: bool init true;
	 [R3_failure] R3_w -> 0.0000100000:(R3_w' = false);
	 [R3_repaired] !R3_w & D2_w -> 1.0000000000:(R3_w' = true);
	 [D2_failure] true -> 1:(R3_w' = false);
	 [D2_repaired] true -> 1:(R3_w' = true);
endmodule

module H1 
	 H1_w: bool init true;
	 [H1_failure] H1_w -> 0.0100000000:(H1_w' = false);
	 [H1_repaired] !H1_w & R1_w -> 1.0000000000:(H1_w' = true);
	 [R1_failure] true -> 1:(H1_w' = false);
	 [R1_repaired] true -> 1:(H1_w' = true);
	 [D1_failure] true -> 1:(H1_w' = false);
	 [D1_repaired] true -> 1:(H1_w' = true);
endmodule

module H2 
	 H2_w: bool init true;
	 [H2_failure] H2_w -> 0.0100000000:(H2_w' = false);
	 [H2_repaired] !H2_w & R1_w -> 1.0000000000:(H2_w' = true);
	 [R1_failure] true -> 1:(H2_w' = false);
	 [R1_repaired] true -> 1:(H2_w' = true);
	 [D1_failure] true -> 1:(H2_w' = false);
	 [D1_repaired] true -> 1:(H2_w' = true);
endmodule

module H3 
	 H3_w: bool init true;
	 [H3_failure] H3_w -> 0.0100000000:(H3_w' = false);
	 [H3_repaired] !H3_w & R1_w -> 1.0000000000:(H3_w' = true);
	 [R1_failure] true -> 1:(H3_w' = false);
	 [R1_repaired] true -> 1:(H3_w' = true);
	 [D1_failure] true -> 1:(H3_w' = false);
	 [D1_repaired] true -> 1:(H3_w' = true);
endmodule

module H4 
	 H4_w: bool init true;
	 [H4_failure] H4_w -> 0.0100000000:(H4_w' = false);
	 [H4_repaired] !H4_w & R2_w -> 1.0000000000:(H4_w' = true);
	 [R2_failure] true -> 1:(H4_w' = false);
	 [R2_repaired] true -> 1:(H4_w' = true);
	 [D1_failure] true -> 1:(H4_w' = false);
	 [D1_repaired] true -> 1:(H4_w' = true);
endmodule

module H5 
	 H5_w: bool init true;
	 [H5_failure] H5_w -> 0.0100000000:(H5_w' = false);
	 [H5_repaired] !H5_w & R2_w -> 1.0000000000:(H5_w' = true);
	 [R2_failure] true -> 1:(H5_w' = false);
	 [R2_repaired] true -> 1:(H5_w' = true);
	 [D1_failure] true -> 1:(H5_w' = false);
	 [D1_repaired] true -> 1:(H5_w' = true);
endmodule

module H6 
	 H6_w: bool init true;
	 [H6_failure] H6_w -> 0.0100000000:(H6_w' = false);
	 [H6_repaired] !H6_w & R2_w -> 1.0000000000:(H6_w' = true);
	 [R2_failure] true -> 1:(H6_w' = false);
	 [R2_repaired] true -> 1:(H6_w' = true);
	 [D1_failure] true -> 1:(H6_w' = false);
	 [D1_repaired] true -> 1:(H6_w' = true);
endmodule

module H7 
	 H7_w: bool init true;
	 [H7_failure] H7_w -> 0.0100000000:(H7_w' = false);
	 [H7_repaired] !H7_w & R3_w -> 1.0000000000:(H7_w' = true);
	 [R3_failure] true -> 1:(H7_w' = false);
	 [R3_repaired] true -> 1:(H7_w' = true);
	 [D2_failure] true -> 1:(H7_w' = false);
	 [D2_repaired] true -> 1:(H7_w' = true);
endmodule

module H8 
	 H8_w: bool init true;
	 [H8_failure] H8_w -> 0.0100000000:(H8_w' = false);
	 [H8_repaired] !H8_w & R3_w -> 1.0000000000:(H8_w' = true);
	 [R3_failure] true -> 1:(H8_w' = false);
	 [R3_repaired] true -> 1:(H8_w' = true);
	 [D2_failure] true -> 1:(H8_w' = false);
	 [D2_repaired] true -> 1:(H8_w' = true);
endmodule

module H9 
	 H9_w: bool init true;
	 [H9_failure] H9_w -> 0.0100000000:(H9_w' = false);
	 [H9_repaired] !H9_w & R3_w -> 1.0000000000:(H9_w' = true);
	 [R3_failure] true -> 1:(H9_w' = false);
	 [R3_repaired] true -> 1:(H9_w' = true);
	 [D2_failure] true -> 1:(H9_w' = false);
	 [D2_repaired] true -> 1:(H9_w' = true);
endmodule

module N1 
	 N1_w: bool init true;
	 [N1_failure] N1_w -> 0.0000100000:(N1_w' = false);
	 [N1_repaired] !N1_w & R1_w -> 1.0000000000:(N1_w' = true);
	 [R1_failure] true -> 1:(N1_w' = false);
	 [R1_repaired] true -> 1:(N1_w' = true);
	 [D1_failure] true -> 1:(N1_w' = false);
	 [D1_repaired] true -> 1:(N1_w' = true);
endmodule

module N2 
	 N2_w: bool init true;
	 [N2_failure] N2_w -> 0.0000100000:(N2_w' = false);
	 [N2_repaired] !N2_w & R1_w -> 1.0000000000:(N2_w' = true);
	 [R1_failure] true -> 1:(N2_w' = false);
	 [R1_repaired] true -> 1:(N2_w' = true);
	 [D1_failure] true -> 1:(N2_w' = false);
	 [D1_repaired] true -> 1:(N2_w' = true);
endmodule

module N3 
	 N3_w: bool init true;
	 [N3_failure] N3_w -> 0.0000100000:(N3_w' = false);
	 [N3_repaired] !N3_w & R2_w -> 1.0000000000:(N3_w' = true);
	 [R2_failure] true -> 1:(N3_w' = false);
	 [R2_repaired] true -> 1:(N3_w' = true);
	 [D1_failure] true -> 1:(N3_w' = false);
	 [D1_repaired] true -> 1:(N3_w' = true);
endmodule

module N4 
	 N4_w: bool init true;
	 [N4_failure] N4_w -> 0.0000100000:(N4_w' = false);
	 [N4_repaired] !N4_w & R3_w -> 1.0000000000:(N4_w' = true);
	 [R3_failure] true -> 1:(N4_w' = false);
	 [R3_repaired] true -> 1:(N4_w' = true);
	 [D2_failure] true -> 1:(N4_w' = false);
	 [D2_repaired] true -> 1:(N4_w' = true);
endmodule

module G1 
	 G1_w: bool init true;
	 [G1_failure] G1_w -> 0.0000100000:(G1_w' = false);
	 [G1_repaired] !G1_w & R1_w -> 1.0000000000:(G1_w' = true);
	 [R1_failure] true -> 1:(G1_w' = false);
	 [R1_repaired] true -> 1:(G1_w' = true);
	 [D1_failure] true -> 1:(G1_w' = false);
	 [D1_repaired] true -> 1:(G1_w' = true);
endmodule

module N5 
	 N5_w: bool init true;
	 [N5_failure] N5_w -> 0.0000100000:(N5_w' = false);
	 [N5_repaired] !N5_w  -> 1.0000000000:(N5_w' = true);
endmodule

module er_0 
	 er_0_w:  [0..1] init 1;
	 [H1_failure] true -> 1:(er_0_w' = 0);
	 [H1_repaired] true -> 1:(er_0_w' = 1);
	 [R1_failure] true -> 1:(er_0_w' = 0);
	 [R1_repaired] true -> 1:(er_0_w' = 1);
	 [D1_failure] true -> 1:(er_0_w' = 0);
	 [D1_repaired] true -> 1:(er_0_w' = 1);
endmodule

module er_1 
	 er_1_w:  [0..1] init 1;
	 [H2_failure] true -> 1:(er_1_w' = 0);
	 [H2_repaired] true -> 1:(er_1_w' = 1);
	 [R1_failure] true -> 1:(er_1_w' = 0);
	 [R1_repaired] true -> 1:(er_1_w' = 1);
	 [D1_failure] true -> 1:(er_1_w' = 0);
	 [D1_repaired] true -> 1:(er_1_w' = 1);
endmodule

module er_2 
	 er_2_w:  [0..1] init 1;
	 [H3_failure] true -> 1:(er_2_w' = 0);
	 [H3_repaired] true -> 1:(er_2_w' = 1);
	 [R1_failure] true -> 1:(er_2_w' = 0);
	 [R1_repaired] true -> 1:(er_2_w' = 1);
	 [D1_failure] true -> 1:(er_2_w' = 0);
	 [D1_repaired] true -> 1:(er_2_w' = 1);
endmodule

formula H1_er = er_0_w;
formula H2_er = er_1_w;
formula H3_er = er_2_w;
formula HG1_er = H1_er+H2_er+H3_er;
label "availability_er" = ((HG1_er >= 2 & G1_w)  & (N5_w &N2_w &N3_w &N1_w |N2_w &N1_w ))
;
formula availability_er = ((HG1_er >= 2 & G1_w)  & (N5_w &N2_w &N3_w &N1_w |N2_w &N1_w ))
;
rewards "time_unavailable_er"
 !availability_er : 1; 
endrewards
